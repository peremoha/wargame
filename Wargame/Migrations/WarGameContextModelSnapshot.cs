// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Wargame;

#nullable disable

namespace Wargame.Migrations
{
    [DbContext(typeof(WarGameContext))]
    partial class WarGameContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArmamentProperty", b =>
                {
                    b.Property<int>("ArmamentsId")
                        .HasColumnType("int");

                    b.Property<int>("PropertiesId")
                        .HasColumnType("int");

                    b.HasKey("ArmamentsId", "PropertiesId");

                    b.HasIndex("PropertiesId");

                    b.ToTable("ArmamentProperty");
                });

            modelBuilder.Entity("ArmamentTank", b =>
                {
                    b.Property<int>("ArmamentsId")
                        .HasColumnType("int");

                    b.Property<int>("TanksId")
                        .HasColumnType("int");

                    b.HasKey("ArmamentsId", "TanksId");

                    b.HasIndex("TanksId");

                    b.ToTable("ArmamentTank");
                });

            modelBuilder.Entity("TankType", b =>
                {
                    b.Property<int>("TanksId")
                        .HasColumnType("int");

                    b.Property<int>("TypesId")
                        .HasColumnType("int");

                    b.HasKey("TanksId", "TypesId");

                    b.HasIndex("TypesId");

                    b.ToTable("TankType");
                });

            modelBuilder.Entity("Wargame.Armament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Accuracy")
                        .HasColumnType("int");

                    b.Property<int>("ArmorPenetration")
                        .HasColumnType("int");

                    b.Property<string>("Caliber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Unknown");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<float>("Landmine")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Range")
                        .HasColumnType("int");

                    b.Property<int>("RangeAircraft")
                        .HasColumnType("int");

                    b.Property<int>("RangeHelicopter")
                        .HasColumnType("int");

                    b.Property<int>("RateOfFire")
                        .HasColumnType("int");

                    b.Property<int>("Stability")
                        .HasColumnType("int");

                    b.Property<int>("Suppression")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Armaments", t =>
                        {
                            t.HasCheckConstraint("Accuracy", "Accuracy >= 0 AND Accuracy <= 100");

                            t.HasCheckConstraint("ArmorPenetration", "ArmorPenetration >= 0 AND ArmorPenetration <= 30");

                            t.HasCheckConstraint("Landmine", "Landmine >= 0 AND Landmine <= 10");

                            t.HasCheckConstraint("Range", "Range >= 0 AND Range <= 3000");

                            t.HasCheckConstraint("RangeAircraft", "RangeAircraft >= 0 AND RangeAircraft <= 3000");

                            t.HasCheckConstraint("RangeHelicopter", "RangeHelicopter >= 0 AND RangeHelicopter <= 3000");

                            t.HasCheckConstraint("RateOfFire", "RateOfFire >= 0 AND RateOfFire <= 3000");

                            t.HasCheckConstraint("Stability", "Stability >= 0 AND Stability <= 100");

                            t.HasCheckConstraint("Suppression", "Suppression >= 0 AND Suppression <= 400");
                        });
                });

            modelBuilder.Entity("Wargame.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Flag")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Wargame.Movement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Movements");
                });

            modelBuilder.Entity("Wargame.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("Wargame.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Wargame.Tank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BackArmor")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("FrontArmor")
                        .HasColumnType("int");

                    b.Property<int>("Fuel")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsAmphibious")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrototype")
                        .HasColumnType("bit");

                    b.Property<int>("MovementId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Optics")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasDefaultValue("Bad");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Range")
                        .HasColumnType("int");

                    b.Property<int>("RoadSpeed")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("SideArmor")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasDefaultValue("Small");

                    b.Property<int>("Speed")
                        .HasColumnType("int");

                    b.Property<string>("Stealth")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasDefaultValue("Bad");

                    b.Property<int>("Strenght")
                        .HasColumnType("int");

                    b.Property<int>("UpperArmor")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.HasIndex("CountryId");

                    b.HasIndex("MovementId");

                    b.HasIndex("RoleId");

                    b.ToTable("Tanks", t =>
                        {
                            t.HasCheckConstraint("BackArmor", "BackArmor >= 0 AND BackArmor <= 400");

                            t.HasCheckConstraint("FrontArmor", "FrontArmor >= 0 AND FrontArmor <= 400");

                            t.HasCheckConstraint("Fuel", "Fuel >= 0 AND Fuel <= 2500");

                            t.HasCheckConstraint("Price", "Price >= 0 AND Price <= 200");

                            t.HasCheckConstraint("Range", "Range >= 0 AND Range <= 1000")
                                .HasName("Range1");

                            t.HasCheckConstraint("RoadSpeed", "RoadSpeed >= 0 AND RoadSpeed <= 150");

                            t.HasCheckConstraint("SideArmor", "SideArmor >= 0 AND SideArmor <= 3000");

                            t.HasCheckConstraint("Speed", "Speed >= 0 AND Speed <= 120");

                            t.HasCheckConstraint("Strenght", "Strenght >= 0 AND Strenght <= 10");

                            t.HasCheckConstraint("UpperArmor", "UpperArmor >= 0 AND UpperArmor <= 3000");

                            t.HasCheckConstraint("Year", "Year >= 1940 AND Year <= 2010");
                        });
                });

            modelBuilder.Entity("Wargame.Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("ArmamentProperty", b =>
                {
                    b.HasOne("Wargame.Armament", null)
                        .WithMany()
                        .HasForeignKey("ArmamentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wargame.Property", null)
                        .WithMany()
                        .HasForeignKey("PropertiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArmamentTank", b =>
                {
                    b.HasOne("Wargame.Armament", null)
                        .WithMany()
                        .HasForeignKey("ArmamentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wargame.Tank", null)
                        .WithMany()
                        .HasForeignKey("TanksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TankType", b =>
                {
                    b.HasOne("Wargame.Tank", null)
                        .WithMany()
                        .HasForeignKey("TanksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wargame.Type", null)
                        .WithMany()
                        .HasForeignKey("TypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Wargame.Tank", b =>
                {
                    b.HasOne("Wargame.Country", "Country")
                        .WithMany("Tanks")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wargame.Movement", "Movement")
                        .WithMany("Tanks")
                        .HasForeignKey("MovementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wargame.Role", "Role")
                        .WithMany("Tanks")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Movement");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Wargame.Country", b =>
                {
                    b.Navigation("Tanks");
                });

            modelBuilder.Entity("Wargame.Movement", b =>
                {
                    b.Navigation("Tanks");
                });

            modelBuilder.Entity("Wargame.Role", b =>
                {
                    b.Navigation("Tanks");
                });
#pragma warning restore 612, 618
        }
    }
}
